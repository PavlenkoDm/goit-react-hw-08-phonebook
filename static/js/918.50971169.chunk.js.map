{"version":3,"file":"static/js/918.50971169.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","store/contacts/selectors.js","webpack://react-homework-template/./src/components/phonebook/contactForm/ContactForm.module.css?7d78","components/phonebook/contactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/phonebook/filter/Filter.module.css?ee87","components/phonebook/filter/Filter.jsx","components/phonebook/contactList/ContactList.jsx","store/filter/selectors.js","webpack://react-homework-template/./src/pages/Phonebook.module.css?cbd2","pages/Phonebook.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useSelector } from 'react-redux';\n\nexport const useContactsSlectors = () => {\n    const contactsState = useSelector(state => state.contacts.items);\n    const loading = useSelector(state => state.contacts.isLoading);\n    const err = useSelector(state => state.contacts.error);\n\n    return { contactsState, loading, err };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__Dfke4\",\"label\":\"ContactForm_label__qKpPx\",\"input\":\"ContactForm_input__pj-1g\"};","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'store/contacts/operations';\nimport { useContactsSlectors } from 'store/contacts/selectors';\nimport style from './ContactForm.module.css';\n\nconst idName = nanoid();\nconst idNumber = nanoid();\n\nexport function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const { contactsState } = useContactsSlectors();\n    const dispatch = useDispatch();\n\n    const handleInputChange = event => {\n        const { name, value } = event.currentTarget;\n\n        switch (name) {\n            case 'name':\n                return setName(value);\n\n            case 'number':\n                return setNumber(value);\n\n            default:\n                console.log('Ooops, something wrong!');\n                break;\n        }\n    };\n\n    const onSubmitHandler = event => {\n        event.preventDefault();\n\n        const isInContacts = contactsState.some(\n            contact => contact.name.toLowerCase() === name.toLowerCase()\n        );\n\n        if (isInContacts) {\n            Notify.failure(`${name} is already in contacts`);\n            return;\n        }\n\n        const newContact = {\n            name,\n            number,\n        };\n\n        dispatch(addContact(newContact));\n\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form className={style.form} onSubmit={onSubmitHandler}>\n            <label\n                className={style.label}\n                htmlFor={idName}\n                style={{ display: 'block' }}\n            >\n                Name\n            </label>\n            <input\n                className={style.input}\n                id={idName}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                style={{ display: 'block' }}\n                value={name}\n                onChange={handleInputChange}\n            />\n\n            <label\n                className={style.label}\n                htmlFor={idNumber}\n                style={{ display: 'block' }}\n            >\n                Number\n            </label>\n            <input\n                className={style.input}\n                id={idNumber}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                style={{ display: 'block' }}\n                value={number}\n                onChange={handleInputChange}\n            />\n\n            <button type=\"submit\">Add contact</button>\n        </form>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Filter_form__NgjJ-\",\"label\":\"Filter_label__K1qLb\",\"title\":\"Filter_title__nYqQE\"};","import { useDispatch } from 'react-redux';\n\nimport { filter } from 'store/filter/filterSlice';\nimport style from './Filter.module.css'\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n\n    const handleFilterChange = event => {\n        dispatch(filter(event.currentTarget.value));\n    };\n\n    return (\n        <div className={style.form}>\n            <label className={style.label}>\n                <span className={style.title}>Find contacts by name</span>\n                <input\n                    type=\"text\"\n                    name=\"filter iput\"\n                    style={{ display: 'block' }}\n                    onChange={handleFilterChange}\n                />\n            </label>\n        </div>\n    );\n};\n","import { useDispatch} from 'react-redux';\n\nimport { useContactsSlectors } from 'store/contacts/selectors';\nimport { useFilterSlectors } from 'store/filter/selectors';\nimport { deleteContact } from 'store/contacts/operations';\n\n\nexport const ContactList = () => {\n\n    const { contactsState } = useContactsSlectors();\n    const { filterState } = useFilterSlectors();\n    const dispatch = useDispatch();\n\n\n    const deleteContacts = value => {\n        dispatch(deleteContact(value));\n    };\n\n\n    const getFilteredContacts = () => {\n        const normalizeFilter = filterState.toLowerCase().trim();\n        return contactsState.filter(contact => {\n            return contact.name.toLocaleLowerCase().includes(normalizeFilter);\n        });\n    };\n\n\n    return (\n        <ul>\n            {getFilteredContacts().map(contact => {\n                const { name, number, id } = contact;\n                return (\n                    <li key={id} style={{ fontSize: '20px' }}>\n                        {name}: {number}\n                        <button\n                            type=\"button\"\n                            name={name}\n                            onClick={() => {\n                                deleteContacts(id);\n                            }}\n                            style={{ marginLeft: '12px' }}\n                        >\n                            Delete\n                        </button>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { useSelector } from 'react-redux';\n\nexport const useFilterSlectors = () => {\n    const filterState = useSelector(state => state.filter);\n\n    return { filterState };\n};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Phonebook_container__1anZw\",\"title\":\"Phonebook_title__u23U0\"};","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { ContactForm } from 'components/index';\nimport { Filter } from 'components/index';\nimport { ContactList } from 'components/index';\nimport { getContacts } from 'store/contacts/operations';\nimport { useContactsSlectors } from 'store/contacts/selectors';\nimport style from './Phonebook.module.css'\n\nexport default function Phonebook() {\n    const dispatch = useDispatch();\n    const { contactsState } = useContactsSlectors();\n\n    useEffect(() => {\n        dispatch(getContacts());\n    }, [dispatch]);\n\n    return (\n        <div className={style.container}>\n            <main>\n                <Helmet>\n                    <title>Your contacts</title>\n                </Helmet>\n\n                <ContactForm />\n\n                {contactsState.length > 0 && (\n                    <>\n                        <h2 className={style.title}>Contacts:</h2>\n\n                        <Filter />\n\n                        <ContactList />\n                    </>\n                )}\n            </main>\n        </div>\n    );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useContactsSlectors","contactsState","useSelector","state","contacts","items","loading","isLoading","err","error","idName","idNumber","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","handleInputChange","event","currentTarget","value","console","log","className","style","onSubmit","preventDefault","some","contact","toLowerCase","Notify","newContact","addContact","htmlFor","display","type","pattern","title","required","onChange","Filter","filter","ContactList","filterState","normalizeFilter","trim","toLocaleLowerCase","includes","getFilteredContacts","map","fontSize","onClick","deleteContact","marginLeft","Phonebook","useEffect","getContacts","Helmet","length"],"sourceRoot":""}